Πετρίδου Άννα 1115201600135


Εργασία 3


Για τη μεταγλώττιση και την εκτέλεση χρησιμοποιώ τα 3 Makefile που έχω φτιάξει, οπότε αρκεί για τη μεταγλώττιση η εντολή:
 
make σε καθε ενα απο τα directories

και για την εκτέλεση ενδεικτικα:


./master -w 3 -b 4096 -s 127.0.0.1 -p 14886 -i input_dir
(βεβαια μπορει να τα δεχτει με οποιαδηποτε σειρα τα ορισματα)


./whoServer -q 24598 -s 14886 -w 7 -b 100
(βεβαια μπορει να τα δεχτει με οποιαδηποτε σειρα τα ορισματα)


./whoClient -q queries.txt -w 1 -sp 24598 -sip 127.0.0.1
(βεβαια μπορει να τα δεχτει με οποιαδηποτε σειρα τα ορισματα)



Για την υλοποίηση μου:

Το master προγραμμα μου ειναι υλοποιημενο όπως στην προηγουμενη εργασια, με χρήση named pipes για την επικοινωνία του aggregator/master με τους workers και χρήση select για λήψη απαντήσεων. Οι δομές και συναρτήσεις που χρησιμοποίησα είναι οι περισσοτερες ίδιες με αυτες της προηγούμενης εργασίας.Κατα τ'αλλα ειναι υλοποιημενο οπως οριζει η εκφωνηση.  To signal handling ειναι ιδιο με τη 2η εργασια.


Το whoServer μου επικοινωνει μέσω threads με τους workers και τους client. Ξεκινωντας,το αρχικο νημα δημιουργει numThreads νηματα. Το main process δεχεται συνδεσεις(χρηση της accept) και τοποθετει τους descriptors στο κυκλικο buffer. Τα υπολοιπα νηματα, εξυπηρετουν αναλογως τις συνδεσεις αυτες που παιρνουν απο το buffer. Για να ξεχωρισω αν η συνδεση αφορα worker ή client χρησιμοποιω εναν δεικτη conndata,ο οποιος δρα σαν πινακας δυο int, οπου στην πρωτη θεση(conndata[0]) ειναι το fd και στη δευτερη θεση(conndata[1]) ειναι 1 αν προκειται για client και 0 αν προκειται για worker.

Εχω υλοποιησει ολα τα αιτηματα που μπορει να δεχτει ο server, χρησιμοποιωντας select οπου χρειαστηκε επικοινωνια με πανω απο εναν worker(στα ερωτηματα δηλαδη που δε δινεται country κτλ).Οπου χρειαζοταν επικοινωνια με καποιον συγκεκριμενο worker, τοτε εβρισκα σε ποιον worker αντιστοιχει το country που εχω και επικοινωνουσα απευθειας μ αυτον.
 Τα αιτηματα τα στελνει ο server στους workers μεσω sockets και οι απαντησεις εκτυπωνονται τοσο στον server οσο και στον client στο τελος. 
Για να αποφυγω το προβλημα του να γραφουν πολλα threads ταυτοχρονα(και να καταληξω πιθανως σε μπερδεμενο αποτελεσμα), εχω χρησιμοποιησει mutexes.


Το whoClient προγραμμα μου, διαβαζει το queries αρχειο γραμμη γραμμη,αγνοωντας καποια κενη γραμμη που ισως υπαρξει κατα λαθος στο αρχειο. Για καθε γραμμη και συνεπως για καθε εντολη, δημιουργειται νημα το οποιο στελνει το αιτημα στο server και υστερα λαμβανονται και εκτυπωνονται οι απαντησεις και στο whoClient.

Για το read και write εχω χρησιμοποιησει readall και writeall. Οπου χρησιμοποιησα μεταβλητες που μοιραζονται κοινη μνημη, εχω βαλει mutexes.
Σε πολλα σημεια περναω παραμετρους μεσω ειδικων δομων που εχω φτιαξει parameters.


